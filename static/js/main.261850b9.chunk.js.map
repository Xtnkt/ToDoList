{"version":3,"sources":["TodoList.module.css","components/Button.tsx","components/CheckBox.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","onClick","callBack","name","CheckBox","type","checked","onChange","event","currentTarget","Todolist","useState","title","setTitle","error","setError","addTaskHandler","trim","addTask","todoListId","tsarChangeFilter","filterValue","changeTodoListFilter","mapTasks","tasks","map","t","key","id","isDone","styles","tId","removeTask","changeIsDone","changeIsDoneHandler","removeTodoList","value","onKeyDown","errorMessage","filter","activeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","taskId","newTitle","newTask","newId","newIsDone","tl","todoListComponents","filteredTasks","tasksForToDoList","getFilteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.261850b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"TodoList_error__OKdia\",\"errorMessage\":\"TodoList_errorMessage__Jt4Il\",\"activeFilter\":\"TodoList_activeFilter__2JVQi\",\"isDone\":\"TodoList_isDone__MkJtk\"};","import React from 'react';\r\n\r\ntype ButtonType = {\r\n    name: string,\r\n    callBack: () => void\r\n    className?: string\r\n}\r\n\r\nexport const Button = (props:ButtonType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.callBack()\r\n    }\r\n\r\n\r\n    return (\r\n        <button className={props.className} onClick={onClickHandler}>{props.name}</button>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent} from 'react';\r\n\r\ntype CheckBoxType ={\r\n    checked:boolean,\r\n    callBack:(isDone:boolean) => void\r\n}\r\n\r\nexport const CheckBox = (props: CheckBoxType) => {\r\n    const onChangeHandler = (event:ChangeEvent<HTMLInputElement>) => {\r\n        props.callBack(event.currentTarget.checked)\r\n    }\r\n    return (\r\n            <input type=\"checkbox\"\r\n                   checked={props.checked}\r\n                   onChange={onChangeHandler}/>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button} from \"./components/Button\";\r\nimport styles from './TodoList.module.css'\r\nimport {CheckBox} from \"./components/CheckBox\";\r\n\r\nexport type TodolistProps = {\r\n    todoListId: string\r\n    title: string,\r\n    tasks: TaskType[],\r\n    filter: FilterButtonType\r\n    removeTask: (taskId: string, todoListId: string) => void,\r\n    changeTodoListFilter: (filterValue: FilterButtonType, todoListId: string) => void,\r\n    addTask: (taskId: string, todoListId: string) => void,\r\n    changeIsDone: (id: string, newIsDone: boolean, todoListId: string) => void,\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\n\r\nexport type FilterButtonType = 'All' | 'Active' | 'Completed'\r\n\r\nexport const Todolist = (props: TodolistProps) => {\r\n\r\n    const [title, setTitle] = useState('');// переписать в useRef\r\n    const [error, setError] = useState<null | string>(null)\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== '') {\r\n            props.addTask(title.trim(), props.todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is requred')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addTaskHandler()\r\n        }\r\n    }\r\n\r\n    const tsarChangeFilter = (filterValue: FilterButtonType) => {\r\n        props.changeTodoListFilter(filterValue, props.todoListId)\r\n    }\r\n\r\n\r\n    const removeTaskHandler = (tId: string) => {\r\n        props.removeTask(tId, props.todoListId)\r\n    }\r\n\r\n    const changeIsDoneHandler = (tId: string, isDone: boolean) => {\r\n        props.changeIsDone(tId, isDone, props.todoListId)\r\n    }\r\n\r\n    const removeTodoListHandler = () => {\r\n        props.removeTodoList(props.todoListId)\r\n    }\r\n\r\n    const mapTasks = props.tasks.map((t) => {\r\n        return (\r\n            <li key={t.id} className={t.isDone ? styles.isDone : ''}>\r\n                <Button name={'x'}\r\n                        callBack={() => removeTaskHandler(t.id)}\r\n                />\r\n                <CheckBox checked={t.isDone}\r\n                          callBack={(isDone) => changeIsDoneHandler(t.id, isDone)}\r\n                />\r\n                <span>{t.title}</span>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                {props.title}\r\n                <Button name={'X'} callBack={removeTodoListHandler}/>\r\n            </h3>\r\n            <div>\r\n                <input className={error ? styles.error : ''}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={onKeyPressHandler}/>\r\n                <Button name={'+'}\r\n                        callBack={() => addTaskHandler()}\r\n                />\r\n            </div>\r\n            {error && <div className={styles.errorMessage}>{error}</div>}\r\n            <ul>\r\n                {mapTasks}\r\n            </ul>\r\n            <div>\r\n                <Button className={props.filter === 'All' ? styles.activeFilter : ''}\r\n                        name={'All'}\r\n                        callBack={() => tsarChangeFilter('All')}\r\n                />\r\n                <Button className={props.filter === 'Active' ? styles.activeFilter : ''}\r\n                        name={'Active'}\r\n                        callBack={() => tsarChangeFilter('Active')}\r\n                />\r\n                <Button className={props.filter === 'Completed' ? styles.activeFilter : ''}\r\n                        name={'Completed'}\r\n                        callBack={() => tsarChangeFilter('Completed')}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {FilterButtonType, TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterButtonType,\r\n}\r\n\r\ntype TasksStateType = {\r\n    [todoListId: string]: TaskType[],\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: 'All'},\r\n        {id: todoListId_2, title: \"What to buy\", filter: 'All'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Paper\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n        ],\r\n    })\r\n    //BLL\r\n\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        // const copyTasks = {...tasks}\r\n        // copyTasks[todoListId] = copyTasks[todoListId].filter((t) => t.id !== taskId)\r\n        // setTasks(copyTasks)\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter((t) => t.id !== taskId)})\r\n    }\r\n\r\n    const addTask = (newTitle: string, todoListId: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: newTitle,\r\n            isDone: false\r\n        }\r\n\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: [newTask, ...tasks[todoListId]]\r\n        })\r\n    }\r\n\r\n    const changeIsDone = (newId: string, newIsDone: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(t => t.id === newId\r\n                ? {...t, isDone: newIsDone} : t)\r\n        })\r\n    }\r\n    const changeTodoListFilter = (filter: FilterButtonType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    function getFilteredTasks(value: FilterButtonType, t: Array<TaskType>) {\r\n        let tasksForToDoList = t;\r\n        if (value === 'Active') {\r\n            tasksForToDoList = t.filter(t => !t.isDone);\r\n        }\r\n        if (value === 'Completed') {\r\n            tasksForToDoList = t.filter(t => t.isDone);\r\n        }\r\n        return tasksForToDoList\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n\r\n        const filteredTasks = getFilteredTasks(tl.filter, tasks[tl.id])\r\n\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={filteredTasks}\r\n\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                changeIsDone={changeIsDone}\r\n                removeTodoList={removeTodoList}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todoListComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}