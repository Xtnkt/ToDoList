{"version":3,"sources":["TodoList.module.css","components/CheckBox.tsx","components/AddItemForm.tsx","components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CheckBox","props","Checkbox","checkedIcon","color","size","style","padding","checked","onChange","event","callBack","currentTarget","AddItemForm","useState","title","setTitle","error","setError","addItemHandler","trimmedTitle","trim","addItem","TextField","variant","label","value","onKeyDown","key","IconButton","onClick","AddBoxRounded","className","styles","errorMessage","EditableSpan","isEditMode","setIsEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Todolist","tsarChangeFilter","filterValue","changeTodoListFilter","todoListId","mapTasks","tasks","map","t","ListItem","id","isDone","aria-label","tId","removeTask","changeIsDone","changeIsDoneHandler","changeTuskTitle","marginTop","changeTodoListTitle","removeTodoList","addTask","List","ButtonGroup","fullWidth","disableElevation","Button","filter","marginRight","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","taskId","newTitle","newTask","newId","newIsDone","tl","todoListComponents","filteredTasks","tasksForToDoList","getFilteredTasks","Grid","item","Paper","elevation","width","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","container","newTodoListId","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.01672fc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"TodoList_error__OKdia\",\"errorMessage\":\"TodoList_errorMessage__Jt4Il\",\"isDone\":\"TodoList_isDone__MkJtk\"};","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox} from \"@material-ui/core\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\ntype CheckBoxType = {\r\n    checked: boolean,\r\n    callBack: (isDone: boolean) => void\r\n}\r\n\r\nexport const CheckBox = (props: CheckBoxType) => {\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.callBack(event.currentTarget.checked)\r\n    }\r\n    return (\r\n        <Checkbox\r\n            checkedIcon={<DoneIcon />}\r\n            color={\"primary\"}\r\n            size={'small'}\r\n            style={{padding: '0px'}}\r\n            checked={props.checked}\r\n            onChange={onChangeHandler}/>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport styles from \"../TodoList.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBoxRounded} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n    const addItemHandler = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== '') {\r\n            props.addItem(trimmedTitle)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant=\"outlined\"\r\n                       size={'small'}\r\n                       label={'New task'}\r\n                       value={title}\r\n                       onKeyDown={onKeyPressHandler}\r\n                       onChange={onChangeHandler}\r\n                       error={!!error}\r\n            />\r\n            <IconButton color={\"primary\"} size={'medium'} onClick={() => addItemHandler()}>\r\n                <AddBoxRounded/>\r\n            </IconButton>\r\n            {error && <div className={styles.errorMessage}>{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string,\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState(props.title);\r\n    const onEditMode = () => {\r\n        setIsEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setIsEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    return (\r\n        isEditMode\r\n            ?\r\n            <TextField\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={onChangeHandler}/>\r\n\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport styles from './TodoList.module.css'\r\nimport {CheckBox} from \"./components/CheckBox\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TodolistProps = {\r\n    todoListId: string\r\n    title: string,\r\n    filter: FilterButtonType,\r\n    tasks: TaskType[],\r\n\r\n    addTask: (newTitle: string, todoListId: string) => void,\r\n    removeTask: (taskId: string, todoListId: string) => void,\r\n    changeIsDone: (id: string, newIsDone: boolean, todoListId: string) => void,\r\n    changeTuskTitle: (taskId: string, title: string, todoListId: string) => void,\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListFilter: (filterValue: FilterButtonType, todoListId: string) => void,\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\n\r\nexport type FilterButtonType = 'All' | 'Active' | 'Completed'\r\n\r\nexport const Todolist = (props: TodolistProps) => {\r\n\r\n    const tsarChangeFilter = (filterValue: FilterButtonType) =>\r\n        () => props.changeTodoListFilter(filterValue, props.todoListId)\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(title, props.todoListId)\r\n    }\r\n    const removeTaskHandler = (tId: string) => {\r\n        props.removeTask(tId, props.todoListId)\r\n    }\r\n    const changeIsDoneHandler = (tId: string, isDone: boolean) => {\r\n        props.changeIsDone(tId, isDone, props.todoListId)\r\n    }\r\n    const removeTodoListHandler = () => {\r\n        props.removeTodoList(props.todoListId)\r\n    }\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.todoListId)\r\n    }\r\n\r\n    const mapTasks = props.tasks.map((t) => {\r\n\r\n        const changeTuskTitle = (title: string) => {\r\n            props.changeTuskTitle(t.id, title, props.todoListId)\r\n        }\r\n        return (\r\n            <ListItem key={t.id}\r\n                      className={t.isDone ? styles.isDone : ''}\r\n                      style={{padding: '0px'}}>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={() => removeTaskHandler(t.id)} size={'small'}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n                <CheckBox checked={t.isDone}\r\n                          callBack={(isDone) => changeIsDoneHandler(t.id, isDone)}\r\n                />\r\n                <EditableSpan title={t.title} changeTitle={changeTuskTitle}/>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{marginTop: '0px'}}>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton  aria-label=\"delete\" color=\"default\" onClick={removeTodoListHandler} size={'small'}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskHandler}/>\r\n            <List>\r\n                {mapTasks}\r\n            </List>\r\n            <ButtonGroup\r\n                fullWidth\r\n                disableElevation\r\n                variant={'contained'}\r\n                size={'small'}\r\n            >\r\n                <Button\r\n                    color={props.filter === 'All' ? \"secondary\" : 'primary'}\r\n                    style={{marginRight: '5px'}}\r\n                    // className={props.filter === 'All' ? styles.activeFilter : ''}\r\n                    onClick={tsarChangeFilter('All')}\r\n                >All</Button>\r\n                <Button\r\n                    color={props.filter === 'Active' ? \"secondary\" : 'primary'}\r\n                    style={{marginRight: '5px'}}\r\n                    // className={props.filter === 'Active' ? styles.activeFilter : ''}\r\n                    onClick={tsarChangeFilter('Active')}\r\n                >Active</Button>\r\n                <Button\r\n                    color={props.filter === 'Completed' ? \"secondary\" : 'primary'}\r\n                    // className={props.filter === 'Completed' ? styles.activeFilter : ''}\r\n                    onClick={tsarChangeFilter('Completed')}\r\n                >Completed</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {FilterButtonType, TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterButtonType,\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todoListId: string]: TaskType[],\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: 'All'},\r\n        {id: todoListId_2, title: \"What to buy\", filter: 'All'},\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Paper\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n        ],\r\n    })\r\n    //BLL\r\n\r\n    //Tasks\r\n    //Delete:\r\n    const removeTask = (taskId: string, todoListId: string) => {\r\n        // const copyTasks = {...tasks}\r\n        // copyTasks[todoListId] = copyTasks[todoListId].filter((t) => t.id !== taskId)\r\n        // setTasks(copyTasks)\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter((t) => t.id !== taskId)})\r\n    }\r\n    //Create:\r\n    const addTask = (newTitle: string, todoListId: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: newTitle,\r\n            isDone: false\r\n        }\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: [newTask, ...tasks[todoListId]]\r\n        })\r\n    }\r\n    //Update:\r\n    const changeIsDone = (newId: string, newIsDone: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(t => t.id === newId\r\n                ? {...t, isDone: newIsDone} : t)\r\n        })\r\n    }\r\n    const changeTuskTitle = (taskId: string, title: string, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(t => t.id === taskId\r\n                ? {...t, title: title}\r\n                : t)\r\n        })\r\n    }\r\n\r\n    //TodoLists\r\n    //Delete:\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks})\r\n    }\r\n    //Create:\r\n    const addTodoList = (title: string) => {\r\n        const newTodoListId: string = v1();\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListId,\r\n            title: title,\r\n            filter: 'All',\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n    //Update:\r\n    const changeTodoListFilter = (filter: FilterButtonType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, title: title} : tl))\r\n    }\r\n\r\n\r\n    //Update:\r\n    const getFilteredTasks = (value: FilterButtonType, t: Array<TaskType>) => {\r\n        let tasksForToDoList = t;\r\n        if (value === 'Active') {\r\n            tasksForToDoList = t.filter(t => !t.isDone);\r\n        }\r\n        if (value === 'Completed') {\r\n            tasksForToDoList = t.filter(t => t.isDone);\r\n        }\r\n        return tasksForToDoList\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        const filteredTasks = getFilteredTasks(tl.filter, tasks[tl.id])\r\n        return (\r\n            <Grid item  key={tl.id}>\r\n                <Paper\r\n                    elevation={8}\r\n                    style={{width: '290px', padding: '20px'}}>\r\n                    <Todolist\r\n                        todoListId={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={filteredTasks}\r\n\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeIsDone={changeIsDone}\r\n                        changeTuskTitle={changeTuskTitle}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{padding:'20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}